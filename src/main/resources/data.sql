
-- MySQL Script generated by MySQL Workbench
-- Mon Nov  8 21:48:11 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema iara
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema iara
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `iara` DEFAULT CHARACTER SET utf8 ;
USE `iara` ;

DROP TABLE IF EXISTS iara.user_has_answered, iara.achievement, iara.alternative, iara.paragraph, iara.user_has_achievement, iara.user_has_class, iara.user_has_course;
DROP TABLE IF EXISTS iara.question;
DROP TABLE IF EXISTS iara.class;
DROP TABLE IF EXISTS iara.course;
DROP TABLE IF EXISTS iara.user_validation;
DROP TABLE IF EXISTS iara.user;

DROP TABLE IF EXISTS iara.User_has_answered, iara.Achievement, iara.Alternative, iara.Paragraph, iara.User_has_achievement, iara.User_has_class, iara.User_has_course;
DROP TABLE IF EXISTS iara.Question;
DROP TABLE IF EXISTS iara.Class;
DROP TABLE IF EXISTS iara.Course;
DROP TABLE IF EXISTS iara.User_validation;
DROP TABLE IF EXISTS iara.User;


-- -----------------------------------------------------
-- Table `iara`.`Course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`course` (
  `id_course` INT NOT NULL AUTO_INCREMENT,
  `id_user_author` INT NOT NULL,
  `name` VARCHAR(45) NULL DEFAULT NULL,
  `duration` VARCHAR(45) NULL DEFAULT NULL,
  `difficulty` VARCHAR(45) NULL DEFAULT NULL,
  `description` VARCHAR(45) NULL DEFAULT NULL,
  `icon` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id_course`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`Class`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`class` (
  `id_class` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL DEFAULT NULL,
  `difficulty` VARCHAR(45) NULL DEFAULT NULL,
  `index` INT NULL DEFAULT NULL,
  `Course_id_course` INT NOT NULL,
  PRIMARY KEY (`id_class`, `Course_id_course`),
  INDEX `fk_Class_Course1_idx` (`Course_id_course` ASC) VISIBLE,
  CONSTRAINT `fk_Class_Course1`
    FOREIGN KEY (`Course_id_course`)
    REFERENCES `iara`.`course` (`id_course`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`Question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`question` (
  `id_question` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NULL DEFAULT NULL,
  `image` VARCHAR(45) NULL DEFAULT NULL,
  `content` VARCHAR(255) NULL DEFAULT NULL,
  `Class_id_class` INT NOT NULL,
  `Class_Course_id_course` INT NOT NULL,
  `index` INT NULL,
  PRIMARY KEY (`id_question`, `Class_id_class`, `Class_Course_id_course`),
  INDEX `fk_Question_Class1_idx` (`Class_id_class` ASC, `Class_Course_id_course` ASC) VISIBLE,
  CONSTRAINT `fk_Question_Class1`
    FOREIGN KEY (`Class_id_class` , `Class_Course_id_course`)
    REFERENCES `iara`.`class` (`id_class` , `Course_id_course`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`Alternative`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`alternative` (
  `id_Alternative` INT NOT NULL AUTO_INCREMENT,
  `text` VARCHAR(45) NULL DEFAULT NULL,
  `correct` TINYINT NULL DEFAULT NULL,
  `Question_id_question` INT NOT NULL,
  PRIMARY KEY (`id_Alternative`, `Question_id_question`),
  INDEX `fk_Alternative_Question1_idx` (`Question_id_question` ASC) VISIBLE,
  CONSTRAINT `fk_Alternative_Question1`
    FOREIGN KEY (`Question_id_question`)
    REFERENCES `iara`.`question` (`id_question`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`user` (
  `id_user` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL DEFAULT NULL,
  `role` VARCHAR(45) NULL DEFAULT NULL,
  `logo` VARCHAR(45) NULL DEFAULT NULL,
  `bio` VARCHAR(300) NULL DEFAULT NULL,
  PRIMARY KEY (`id_user`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`User_has_course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`user_has_course` (
  `id_User_has_course` INT NOT NULL AUTO_INCREMENT,
  `User_id_user` INT NOT NULL,
  `Course_id_course` INT NOT NULL,
  PRIMARY KEY (`id_User_has_course`),
  INDEX `fk_User_has_course_Course1_idx` (`Course_id_course` ASC) VISIBLE,
  INDEX `fk_User_has_course_User1_idx` (`User_id_user` ASC) VISIBLE,
  CONSTRAINT `fk_User_has_course_User2`
    FOREIGN KEY (`User_id_user`)
    REFERENCES `iara`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_course_Course2`
    FOREIGN KEY (`Course_id_course`)
    REFERENCES `iara`.`course` (`id_course`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`User_has_class`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`user_has_class` (
  `id_User_has_class` INT NOT NULL AUTO_INCREMENT,
  `User_id_user` INT NOT NULL,
  `Class_id_class` INT NOT NULL,
  `completed` TINYINT NULL DEFAULT NULL,
  `progress` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_User_has_class`),
  INDEX `fk_User_has_class_Class1_idx` (`Class_id_class` ASC) VISIBLE,
  INDEX `fk_User_has_class_User1_idx` (`User_id_user` ASC) VISIBLE,
  CONSTRAINT `fk_User_has_class_User1`
    FOREIGN KEY (`User_id_user`)
    REFERENCES `iara`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_class_Class2`
    FOREIGN KEY (`Class_id_class`)
    REFERENCES `iara`.`class` (`id_class`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `iara`.`achievement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`achievement` (
  `id_achievement` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  `description` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id_achievement`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`User_has_achievement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`user_has_achievement` (
  `User_id_user` INT NOT NULL,
  `Achievement_id_achievement` INT NOT NULL,
  PRIMARY KEY (`User_id_user`, `Achievement_id_achievement`),
  INDEX `fk_User_has_achievement_achievement1_idx` (`Achievement_id_achievement` ASC) VISIBLE,
  INDEX `fk_User_has_achievement_User1_idx` (`User_id_user` ASC) VISIBLE,
  CONSTRAINT `fk_User_has_achievement_User1`
    FOREIGN KEY (`User_id_user`)
    REFERENCES `iara`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_achievement_achievement1`
    FOREIGN KEY (`Achievement_id_achievement`)
    REFERENCES `iara`.`achievement` (`id_achievement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`Paragraph`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`paragraph` (
  `id_paragraph` INT NOT NULL AUTO_INCREMENT,
  `content` VARCHAR(1023) NULL,
  `image` VARCHAR(63) NULL,
  `Class_id_class` INT NOT NULL,
  `Class_Course_id_course` INT NOT NULL,
  `index` INT NULL,
  PRIMARY KEY (`id_paragraph`, `Class_id_class`, `Class_Course_id_course`),
  INDEX `fk_Paragraph_Class1_idx` (`Class_id_class` ASC, `Class_Course_id_course` ASC) VISIBLE,
  CONSTRAINT `fk_Paragraph_Class1`
    FOREIGN KEY (`Class_id_class` , `Class_Course_id_course`)
    REFERENCES `iara`.`class` (`id_class` , `Course_id_course`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `iara`.`User_validation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS iara.user_validation (
  id_user_validation INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(45) NULL DEFAULT NULL,
  password VARCHAR(45) NULL DEFAULT NULL,
  User_id_user INT NOT NULL,
  PRIMARY KEY (id_user_validation, User_id_user),
  CONSTRAINT fk_User1
    FOREIGN KEY (User_id_user)
    REFERENCES iara.user (id_user)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `iara`.`User_has_answered`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `iara`.`user_has_answered` (
  `id_user_has_answered` INT NOT NULL AUTO_INCREMENT,
  `User_id_user` INT NOT NULL,
  `question_id_question` INT NOT NULL,
  `Alternative_id_Alternative` INT NOT NULL,
  PRIMARY KEY (`id_user_has_answered`),
  INDEX `fk_User_has_answered_question1_idx` (`question_id_question` ASC) VISIBLE,
  INDEX `fk_User_has_answered_Alternative1_idx` (`Alternative_id_Alternative` ASC) VISIBLE,
  INDEX `fk_User_has_answered_User1_idx` (`User_id_user` ASC) VISIBLE,
  CONSTRAINT `fk_User_has_answered_User1_idx`
    FOREIGN KEY (`User_id_user`)
    REFERENCES `iara`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_answered_Alternative1`
    FOREIGN KEY (`Alternative_id_Alternative`)
    REFERENCES `iara`.`alternative` (`id_Alternative`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_answered_question1`
    FOREIGN KEY (`User_id_user`)
    REFERENCES `iara`.`question` (`id_question`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



-- popula tabela achievement

INSERT INTO `iara`.`achievement` (name, description)
VALUES ("O início", "Você esteve ativo por 3 dias seguidos!");

INSERT INTO achievement (name, description)
VALUES ("esforçado!", "Você esteve ativo por 10 dias seguidos!");

INSERT INTO achievement (name, description)
VALUES ("gênio!", "Você esteve ativo por 50 dias seguidos!");

INSERT INTO achievement (name, description)
VALUES ("Primeira de muitas!", "Você concluiu sua primeira atividade!");

INSERT INTO achievement (name, description)
VALUES ("O fim da primeira jornada", "Você concluiu seu primeiro curso!");

INSERT INTO achievement (name, description)
VALUES ("MONSTRO SAGRADO!", "Você concluiu TODOS os cursos!");

-- popula tabela course

INSERT INTO course (id_user_author, name, duration, difficulty, description, icon)
VALUES (1, "Harmonia", "Curto", "Difícil", "Harmonia funcional e tudo mais.", "ícone");

INSERT INTO course (id_user_author, name, duration, difficulty, description, icon)
VALUES (1, "Escalas", "Curto", "Fácil", "Escalas maiores e menores.", "ícone");

INSERT INTO course (id_user_author, name, duration, difficulty, description, icon)
VALUES (1, "Ritmo", "Médio", "Médio", "Como ler e criar ritmos.", "ícone");

INSERT INTO course (id_user_author, name, duration, difficulty, description, icon)
VALUES (2, "Leitura de partitura", "Longo", "Médio", "Encontrar notas e enteder ritmo", "ícone");

-- popula tabela class

INSERT INTO class
VALUES(1, "Funções harmônicas", "média", 1, 1);

INSERT INTO class
VALUES(2, "Função tônica", "fácil", 2, 1);

INSERT INTO class
VALUES(3, "Função subdominante", "fácil", 3, 1);

INSERT INTO class
VALUES(4, "Função dominante", "fácil", 4, 1);

INSERT INTO class
VALUES(5, "Escala maior", "fácil", 1, 2);

INSERT INTO class
VALUES(6, "Escala menor", "fácil", 2, 2);

INSERT INTO class
VALUES(7, "Semínima", "fácil", 1, 3);

INSERT INTO class
VALUES(8, "Clave de sol", "fácil", 1, 4);

INSERT INTO class
VALUES(9, "Clave de fá", "fácil", 2, 4);

-- popula a tabela paragraph

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Existem 3 principais funções. Falaremos delas nas proximas aulas", "https://picsum.photos/500", 1, 1);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Transmite a sensação de repouso e finalização", "https://picsum.photos/500", 2, 1);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Transmite também a sensação de estabilidade", "https://picsum.photos/500", 2, 1);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Transmite a sensação de caminhar", "https://picsum.photos/500", 3, 1);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Transmite a sensação de tensão", "https://picsum.photos/500", 4, 1);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("É dada pelos intervalos: T T St T T T St", "https://picsum.photos/500", 5, 2);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Possui características alegres", "https://picsum.photos/500", 5, 2);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Seu 6 grau é sua relativa menor", "https://picsum.photos/500", 5, 2);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("É dada pelos intervalos: T St T T St T T", "https://picsum.photos/500", 6, 2);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Possui características tristes", "https://picsum.photos/500", 6, 2);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("É 1/4 do tempo de um compasso 4/4. Tem a seguinte figura", "https://picsum.photos/500", 7, 3);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Indica que o Sol está na 2 linha. Tem a seguinte forma", "https://picsum.photos/500", 8, 4);

INSERT INTO paragraph (content, image, Class_id_class, Class_Course_id_course)
VALUES ("Indica que o Fá está na 4 linha. Tem a seguinte forma", "https://picsum.photos/500", 9, 4);

-- popula tabela question

INSERT INTO question
VALUES (1, "Questão 1", "https://picsum.photos/500", "Qual das seguintes escalas é maior?", 5, 2, 1);

INSERT INTO question
VALUES (2, "Questão 2", "https://picsum.photos/500", "Qual das seguintes representa um Sol maior?", 5, 2, 2);

INSERT INTO question
VALUES (3, "Questão 1", "https://picsum.photos/500", "Qual das seguintes escalas é menor?", 6, 2, 1);

INSERT INTO question
VALUES (4, "Questão 1", "https://picsum.photos/500", "Qual destas notas é um Sol?", 8, 4, 1);

INSERT INTO question
VALUES (5, "Questão 2", "https://picsum.photos/500", "Qual destas notas é um Dó?", 8, 4, 2);

INSERT INTO question
VALUES (6, "Questão 1", "https://picsum.photos/500", "Qual destas notas é um Sol?", 9, 4, 1);

INSERT INTO question
VALUES (7, "Questão 2", "https://picsum.photos/500", "Qual destas notas é um Dó?", 9, 4, 2);

-- popula tabela Alternative

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 1);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 1);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 1);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 1);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 1);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 1);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 2);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 2);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 2);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 2);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 2);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 2);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 3);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 3);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 3);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 3);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 3);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 3);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 4);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 4);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 4);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 4);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 4);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 4);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 5);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 5);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 5);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 5);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 5);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 5);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 6);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 6);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 6);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 6);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 6);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 6);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("certa", 1, 7);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 7);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 7);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 7);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 7);

INSERT INTO alternative (text, correct, Question_id_question)
VALUES ("errada", 0, 7);

-- popula tabela user

INSERT INTO user (name, role, logo, bio)
VALUES ("Professor Risco", "professor", "logo", "Professor especializado em jazz. Tocou por 14 anos em banda mundo afora");

INSERT INTO user (name, role, logo, bio)
VALUES ("Jorge Aluno", "aluno", "logo", "Comecei a tocar guitarra em 2015 e quero aprender novos estilos");

INSERT INTO user (name, role, logo, bio)
VALUES ("Lucas", "aluno", "logo", "Gosto de instrumentos de percussão e quero me aprimorar na bateria.");

INSERT INTO user (name, role, logo, bio)
VALUES ("Isabelle", "aluno", "logo", "Sou muito fã de guitarristas e sou inspirada em meus ídolos, um dia irei ser capaz de tocar como eles.");

-- popula tabela User_has_achievement

INSERT INTO user_has_achievement (User_id_user, achievement_id_achievement)
VALUES (1, 1);

INSERT INTO user_has_achievement (User_id_user, achievement_id_achievement)
VALUES (1, 2);

INSERT INTO user_has_achievement (User_id_user, achievement_id_achievement)
VALUES (1, 3);

INSERT INTO user_has_achievement (User_id_user, achievement_id_achievement)
VALUES (2, 5);

-- popula tabela User_has_course

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (1, 1);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (1, 2);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (1, 3);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (1, 4);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (2, 4);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (3, 4);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (2, 1);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (3, 1);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (3, 2);

INSERT INTO user_has_course (User_id_user, Course_id_course)
VALUES (4, 4);

-- popula User_has_class

INSERT INTO user_has_class (User_id_user, Class_id_class, completed, progress)
VALUES (2, 1, 1, 100);

INSERT INTO user_has_class (User_id_user, Class_id_class, completed, progress)
VALUES (2, 2, 0, 70);

INSERT INTO user_has_class (User_id_user, Class_id_class, completed, progress)
VALUES (2, 5, 1, 100);

INSERT INTO user_has_class (User_id_user, Class_id_class, completed, progress)
VALUES (2, 6, 0, 10);

INSERT INTO user_has_class (User_id_user, Class_id_class, completed, progress)
VALUES (2, 8, 1, 100);

INSERT INTO user_has_class (User_id_user, Class_id_class, completed, progress)
VALUES (2, 9, 0, 0);


INSERT INTO user_validation (id_user_validation, username, password, User_id_user)
VALUES (1, "sosuer", "gabrilquichida", 1);

INSERT INTO user_validation (id_user_validation, username, password, User_id_user)
VALUES (2, "shaolinmatadordeporco", "shaolin", 2);

INSERT INTO user_validation (id_user_validation, username, password, User_id_user)
VALUES (3, "flavinhodopneu", "aro80", 3);

INSERT INTO user_validation (id_user_validation, username, password, User_id_user)
VALUES (4, "isabelemalik", "1d4ever", 4);